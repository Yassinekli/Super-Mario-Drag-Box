/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mario;

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import mario.DrawComponent.Drawable;
import mario.position.Positions;
import javax.swing.JLabel;
import javax.swing.JPanel;
import static mario.position.Positions.LENGTH_IMAGES;
import static mario.position.Positions.INDEX_ROAD;
// To read an XML file we need the classes below
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;



/**
 *
 * @author Yassine
 */
public  class PlayingFrame extends javax.swing.JFrame {

    Positions CURRENT_LEVEL_POSITION;
    int counter = 0;
    Drawable draw = new Drawable();
    
    
    /** Creates new form PlayingFrame
     * @throws java.io.IOException */
    public PlayingFrame() throws IOException {
        initComponents();
        setSize(506, 422);
        setBackground(Color.white);
        
        CURRENT_LEVEL_POSITION = getLevelPositions();
        draw.drawLevel(this, CURRENT_LEVEL_POSITION);
        
    }

    
    public  void formWindowClosing(WindowEvent evt) 
    {
        try {
            new GameMenu().setVisible(true);
            counter = 0;
            INDEX_ROAD = 0;
        } catch (IOException ex) {
            Logger.getLogger(PlayingFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(CURRENT_LEVEL_POSITION != null)
        {
            if(evt.getKeyCode() == 38 && verifyFrontiers(CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y()-35, 38)) // UP
            {
                manipuleKeyPress(38, '-', CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y(), CURRENT_LEVEL_POSITION.getGoodsPosition_X(), (CURRENT_LEVEL_POSITION.getGoodsPosition_Y() + 35));    
            }
            else
            {
            if(evt.getKeyCode() == 40 && verifyFrontiers(CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y()+35, 40)) // Down
            {
                manipuleKeyPress(40, '+', CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y(), CURRENT_LEVEL_POSITION.getGoodsPosition_X(), (CURRENT_LEVEL_POSITION.getGoodsPosition_Y() - 35));        
            }
            else 
            {
                if(evt.getKeyCode() == 37 && verifyFrontiers(CURRENT_LEVEL_POSITION.getMarioPosition_X()-35, CURRENT_LEVEL_POSITION.getMarioPosition_Y(), 37)) // Left
                {
                    manipuleKeyPress(37, '-', CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y(), (CURRENT_LEVEL_POSITION.getGoodsPosition_X() + 35), CURRENT_LEVEL_POSITION.getGoodsPosition_Y());

                }
                else
                {
                    if(evt.getKeyCode() == 39 && verifyFrontiers(CURRENT_LEVEL_POSITION.getMarioPosition_X()+35, CURRENT_LEVEL_POSITION.getMarioPosition_Y(), 39)) // Right
                    {
                        manipuleKeyPress(39, '+', CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y(), (CURRENT_LEVEL_POSITION.getGoodsPosition_X() - 35), CURRENT_LEVEL_POSITION.getGoodsPosition_Y());
                    }
                }
            }
        }
        areSamePositions();
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PlayingFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(PlayingFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /////////////////////////////////////////////// ******************************** //////////////////////////////////////////////
    /////////////////////////////////////////////// ******************************** //////////////////////////////////////////////
    /////////////////////////////////////////////// ******************************** //////////////////////////////////////////////
    /////////////////////////////////////////////// *******   My Methods   ********* //////////////////////////////////////////////
    
    /* 
        This method read xml file, it contains some methods that get the specific tag by its name.
    */
    public NodeList readXMLFile()
    {
        try {
            File ReadXMLFile = new File("LevelsInfo.xml");
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
                
                Document document = documentBuilder.parse(ReadXMLFile);
                document.getDocumentElement().normalize();
                
                return document.getElementsByTagName("Positions");
                
        } catch (ParserConfigurationException | SAXException | IOException ex) {
            Logger.getLogger(PlayingFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    /*
        Get positions of Mario, Star and Goods.
    */
    public Positions getLevelPositions()
    {
        Positions LevelPositions = new Positions();
        NodeList Levels_Positions = readXMLFile();
        if(counter < Levels_Positions.getLength())
        {
            Element element = (Element) Levels_Positions.item(counter++);

            LevelPositions.setMarioPosition(Integer.parseInt(element.getAttribute("MARIO_POSITION_X")), Integer.parseInt(element.getAttribute("MARIO_POSITION_Y")));
            LevelPositions.setStarPosition(Integer.parseInt(element.getAttribute("STAR_POSITION_X")), Integer.parseInt(element.getAttribute("STAR_POSITION_Y")));
            LevelPositions.setGoodsPosition(Integer.parseInt(element.getAttribute("GOODS_POSITION_X")), Integer.parseInt(element.getAttribute("GOODS_POSITION_Y")));
            return LevelPositions;
        }
        return null;
    }

    /*
        Test if Goods have the same position of the Star.
    */
    public void areSamePositions()
    {
        if(CURRENT_LEVEL_POSITION.getGoodsPosition_X() == CURRENT_LEVEL_POSITION.getStarPosition_X() && CURRENT_LEVEL_POSITION.getGoodsPosition_Y() == CURRENT_LEVEL_POSITION.getStarPosition_Y())
        {
            getContentPane().removeAll();
            getContentPane().add(new JPanel());
            repaint();
            CURRENT_LEVEL_POSITION = getLevelPositions();
            if(CURRENT_LEVEL_POSITION != null)
                draw.drawLevel(this, CURRENT_LEVEL_POSITION);
            else
            {
                JLabel End_Game_Label = new JLabel("End Of Game");
                End_Game_Label.setSize(200, 200);
                End_Game_Label.setLocation(210, 70);
                End_Game_Label.setVisible(true);
                add(End_Game_Label);
            }
        } 
    }

    /*
        Manipulate key press event
    */
    public void manipuleKeyPress(int Key_Code, char Operation, int Mario_X_Position, int Mario_Y_Position, int Goods_X_Position, int Goods_Y_Position)
    {
        switch(Operation)
        {
            case '+':
                if(Mario_X_Position == Goods_X_Position && Mario_Y_Position == Goods_Y_Position )
                {
                    switch(Key_Code)
                    {
                        case 39:
                            if(verifyFrontiers(CURRENT_LEVEL_POSITION.getGoodsPosition_X()+35, CURRENT_LEVEL_POSITION.getGoodsPosition_Y(), 39))
                            {
                                CURRENT_LEVEL_POSITION.changeMarioPositionsValue(Operation, Key_Code);
                                draw.drawMario(this, CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y());
                                CURRENT_LEVEL_POSITION.changeGoodsPositionsValue(Operation, Key_Code);
                                draw.drawGoods(this, CURRENT_LEVEL_POSITION.getGoodsPosition_X(), CURRENT_LEVEL_POSITION.getGoodsPosition_Y());
                            }
                            break;
                        case 40:
                            if(verifyFrontiers(CURRENT_LEVEL_POSITION.getGoodsPosition_X(), CURRENT_LEVEL_POSITION.getGoodsPosition_Y()+35, 40))
                            {
                                CURRENT_LEVEL_POSITION.changeMarioPositionsValue(Operation, Key_Code);
                                draw.drawMario(this, CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y());
                                CURRENT_LEVEL_POSITION.changeGoodsPositionsValue(Operation, Key_Code);
                                draw.drawGoods(this, CURRENT_LEVEL_POSITION.getGoodsPosition_X(), CURRENT_LEVEL_POSITION.getGoodsPosition_Y());                           
                            }
                            break;
                    }
                }
                else
                {
                    CURRENT_LEVEL_POSITION.changeMarioPositionsValue(Operation, Key_Code);
                    draw.drawMario(this, CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y());
                }      
                break;
            
            case '-':
                if(Mario_X_Position == Goods_X_Position && Mario_Y_Position == Goods_Y_Position )
                {
                    switch(Key_Code)
                    {
                        case 37:
                            if(verifyFrontiers(CURRENT_LEVEL_POSITION.getGoodsPosition_X()-35, CURRENT_LEVEL_POSITION.getGoodsPosition_Y(), 37))
                            {
                                CURRENT_LEVEL_POSITION.changeMarioPositionsValue(Operation, Key_Code);
                                draw.drawMario(this, CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y());
                                CURRENT_LEVEL_POSITION.changeGoodsPositionsValue(Operation, Key_Code);
                                draw.drawGoods(this, CURRENT_LEVEL_POSITION.getGoodsPosition_X(), CURRENT_LEVEL_POSITION.getGoodsPosition_Y());
                            }
                            break;
                        case 38:
                            if(verifyFrontiers(CURRENT_LEVEL_POSITION.getGoodsPosition_X(), CURRENT_LEVEL_POSITION.getGoodsPosition_Y()-35, 38))
                            {
                                CURRENT_LEVEL_POSITION.changeMarioPositionsValue(Operation, Key_Code);
                                draw.drawMario(this, CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y());
                                CURRENT_LEVEL_POSITION.changeGoodsPositionsValue(Operation, Key_Code);
                                draw.drawGoods(this, CURRENT_LEVEL_POSITION.getGoodsPosition_X(), CURRENT_LEVEL_POSITION.getGoodsPosition_Y());
                            }
                            break;
                    }
                }
                else
                {
                    CURRENT_LEVEL_POSITION.changeMarioPositionsValue(Operation, Key_Code);
                    draw.drawMario(this, CURRENT_LEVEL_POSITION.getMarioPosition_X(), CURRENT_LEVEL_POSITION.getMarioPosition_Y());
                }      
                break;
        }
    }
    
    
    /*
        Verifie frontiers
    */
    public Boolean verifyFrontiers(int XPosition, int YPosition, int KeyCode)
    {
        int[][] frontiers_mario = draw.empty_point;
        
        switch(KeyCode)
        {
            case 37:
                for(int i=0; i < LENGTH_IMAGES; i++)
                    if(frontiers_mario[0][i] == XPosition && frontiers_mario[1][i] == YPosition)
                        return true;
                ;break;
            case 38:
                for(int i=0; i < LENGTH_IMAGES; i++)
                    if(frontiers_mario[0][i] == XPosition && frontiers_mario[1][i] == YPosition)
                        return true;
                ;break;
            case 39:
                for(int i=0; i < LENGTH_IMAGES; i++)
                    if(frontiers_mario[0][i] == XPosition && frontiers_mario[1][i] == YPosition)
                        return true;
                ;break;
            case 40:
                for(int i=0; i < LENGTH_IMAGES; i++)
                    if(frontiers_mario[0][i] == XPosition && frontiers_mario[1][i] == YPosition)
                        return true;
                ;break;
        
        }
        return false;
    }
}
